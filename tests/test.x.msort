const LENGTH:=1, 
      NUMCORES:=16;
port led : 0x00010600;
var a: int[LENGTH];

% Merge
proc merge(a, b, c: int[]; la, lb: int) is
  var i, j, k: int;
{ i:=0 ; j:=0 ; k:=0
; while (i<la) and (j<lb) do 
  { if(a[i] <= b[j]) 
    then 
    { c[k] := a[i] 
    ; i:=i+1 ; k:=k+1
    } 
    else 
    { c[k] := b[j]
    ; j:=j+1 ; k:=k+1
    }
  }
; if i<la then c[k] := a[i] else skip
; if j<lb then c[k] := b[j] else skip
}

% Merge sort
proc msort(t, n: int; array: int[]; len: int) is
  var a, b: int[];
{ led ! 1
; if n > 1 then 
  { a aliases array[0..]
  ; b aliases array[0..]
  %; if len = 1 then
  ; { msort(t, n/2, a, len) 
    | on core[t+(n/2)] : msort(t+(n/2), n/2, b, len) 
    }
  %  else 
  %  { msort(t, n/2, a, 1) 
  %  ; msort(t+(n/2), n/2, b, 1) 
  %  }
  %; if 0 = 1 then merge(a, b, array, 0, 0) else skip
  }
  else skip
}

% Main
proc main() is
  var i: int;
%{ for i:=0 to LENGTH-1 do a[i] := LENGTH-i
 msort(0, NUMCORES, a, LENGTH)
%}
