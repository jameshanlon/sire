% main method
proc main()

% printing
proc newline()
proc prints(val s)
proc printn(val n)
proc printhex(val n)
proc putval(val c)
proc selectoutput(val c)

% debug
proc printtree(val x)

% lexer
proc formtree()
proc cmperror(val s)
func newvec(val n)
func cons1(val op)
func cons2(val op, val t1)
func cons3(val op, val t1, val t2)
func cons4(val op, val t1, val t2, val t3)
func cons5(val op, val t1, val t2, val t3, val t4)
func cons6(val op, val t1, val t2, val t3, val t4, val t5)
func cons7(val op, val t1, val t2, val t3, val t4, val t5, val t6)
func lookupword()
func packstring(val s, v)
proc unpackstring(val s, v)
proc declare(val s, val item)
proc declsyswords()
func getchar()
proc rdline()
proc rch()
proc rdtag()
proc readnumber(val base)
func value(val c)
func readcharco()
proc readstring()
proc nextsymbol()

% parser (top down recursive descent)
proc checkfor(val s, val m)
func rname()
proc relement()
proc rexpression()
proc rright(val s)
func associative(val s)
func rstatement()
proc checkinput(val x)
func rinput(val c)
func rleft()
func rstatements()
func rvardecls()
func rprocdecls()
func rexplist()
func rnamelist()
func rvardecl() 
func rformals() 
func rbody() 
func rmodule()
func rprocdecl()

% scope analysis/translation
proc namemessage(val s, val x)
proc generror(val s)
proc declprocs(val x) 
proc declextprocs(val m, val x) 
proc declformals(val x) 
proc declformal(val x) 
proc declvars(val x, val t) 
func getextnum() 
func external(val e)
func extmod(val e)
func extnum(val e)
func extmodref(val m)
func makesignature(val entry, val x)
func findname(val x)
func findextname(val m, val e)
proc scopeproc(val x) 
proc scopenames(val x)
func scopenamesexpr(val x)
func scopen(val n, val ms)

% move embedded function calls out 
func flatten(val x)
func liftcalls(val x, val slist)
func liftnestcalls(val x, val slist)

% linearise nested parallel statements
func linearise(val x)
func lastnode(val op, val x)

% constant expression evaluation etc
proc optimise(val x)
func optimiseexpr(val x)
func isval(val x)
func getval(val x)
func evalmonadic(val x)
func evaldiadic(val x) 

% liveness analysis
func livevars(val x, val livelist)
func freevars(val x) - set of free vars
func fvarset(val x) 
func varset(val x)
func boundset(val x)  - set of bound vars
func allvarset(val x)
func sourceset(val x)
func destset(val x) - set of dest
func expdestset(val x)
func rhsourceset(val x) 
func lhsourceset(val x)
func smember(val x)     % set manipulation, done with bit patterns (<=32!)
func sunion(val s1, val s2)
func intersection(val s1, val s2) 
func sminus(val s1, val s2)
func ssize(val s) 

% binding variables to store locations
proc genprocs(val x)
proc bindformals(val x)
proc bindformal(val x, val r)
proc initports(val x)
proc initfrmchans(val x) 
proc initstkchans(val x) 
func getchan(val x, val t)
proc freestkchans(val x) 
proc bindvars(val x, val b) 
proc bindvar(val x, val b)
proc setfreestates(val freevars)
proc bindtemp(val x, val r)
proc allocfrm(val x)
proc allocfrmarrays(val x) 
proc genframe(val x) 
proc genframearrays(val x) 

% check formal function arguments (and return vals?)
func fncheckargs(val x, val s) 
func fnsourceset(val x, val s) 
func fndestset(val x, val s)
proc setresults(val x, val s) 
proc setresult(val x, val s) 

% house keeping for proc calls
func s_remove(val s, val r) 
func s_reg(val r)
func s_setsize(val s) 
func listsize(val x) 

% proc calls
proc prepareactuals(val x)
proc prepareactual(val x)
proc preparedepends(val a, val reg)
proc sortdepends()
proc genactuals(val x)
proc prepareresults(val x)
proc prepareresult(val x) 
proc prepareresdepends(val r, val reg)
proc genresults(val x) 

% generating code stuff (strings and consts loaded relative to current pc)
proc genconst(val n)
proc genstring(val x)
proc loadconstaddr(val offs)
proc loadstringaddr(val offs)

% code generation
func getlabel() 
proc generate() 
proc genprog(val x) 
proc adjustarrays() 
func optimizable(val x)
func containscall(val x)
proc genif(val x) 
proc genwhile(val x) 
proc genreturn(val x) 
proc genstatement(val x) 
proc sequence(val x, val cchan) 
proc gencall(val sig) 
proc assignreturns(val dest)
proc varassign(val dest, val reg) 
proc arrayassign(val dest, val sourcereg)
proc genand(val x)
proc genor(val x)
proc genorguards(val x)
proc genorbodies(val x)
proc genorbody(val x)
proc genevent(val c, val x)
proc genenablecall(val x) 
proc geneventcall(val x)
proc genorcall(val x) 
proc geninput(val list, val rreg)
proc gentimerin(val list, val rreg) 
proc genportin(val list, val rreg)
proc geninassign(val list, val rreg)
proc checkseq(val c, val x) 

% conditional behaviour
func gencondjump(val x, val f, val label) 
proc gencjump(val x, val f, val label) 
proc setpostsucc(val p)
proc setposttarget(val p) 
proc gencenble(val x, val f, val prt)

% expression compilation (bit jumbled)
func iszero(val x)
func isimmediate12(val x)
func isimmediate64(val x)
func isimmediate1024(val x)
func isimmediate65536(val x)
proc genimmshift(val op, val dreg, val reg, val shiftval) 
func expdepth(val x)  - number of regs req by expression
proc movetoreg(val reg, val x)
proc a_freetempregbut(val reg, val r)
func moveop1toreg(val dreg, val x, val y) 
func needsreg(val dreg, val x)
func moveop2toreg(val dreg, val regop1, val x) 
% ######### some functions missing here
proc vn_initstate(val vnum, val s)
proc vn_setstate(val vnum, val s)
proc vn_clearstate(val vnum, val s)
func vn_isset(val vnum, val s)
func vn_isclear(val vnum, val s)
func vn_offset(val vnum)
proc vn_setoffset(val vnum, val offs)
func vn_reg(val vnum)
proc vn_setreg(val vnum, val r)
proc vn_init()
func vnum(val x) 
proc setvnum(val x)
func allocv() 
proc clearvnums() 
proc makeregfree(val r) 
proc savevar(val vn)
proc storevar(val vn)
proc loadvar(val vn)
proc printlist(val s, val vset)
proc checklive(val liveset)
proc setlivemem(val liveset)
proc setlive(val liveset)
proc makedead(val reg)
proc savelivevars(val liveset)
proc loadvars(val liveset) 
proc lockintoregs(val varset, val liveset)
proc unlockregs(val varset)
proc forgetregvals()
proc forgetregs()
func monadic(val op)
func diadic(val op)
func relop(val op)

% code buffer and instruction generation
proc genmov(val dest, val src)
proc gendiadic(val op, val op1, val op2, val op3)
proc gen3r(val op, val op1, val op2, val op3) 
proc gen2rus(val op, val op1, val op2, val op3) 
proc gen2r(val op, val op1, val op2) 
proc genrus(val op, val op1, val op2)
proc gen1r(val op, val op1)
proc gen0r(val op)
proc genru6(val op, val op1, val op2) 
proc genu6(val op, val op1) 
proc genrlab(val op, val op1, val op2)
proc genu6lab(val op, val op1) 
proc genu6stk(val op, val op1) 
proc genru6stk(val op, val op1, val op2) 
proc genu10ref(val op, val op1, val t)
proc gens(val i) 
proc genl(val i) 
proc genslab(val i, val l, val t) 
proc setlab(val l)
proc setstk(val l) 
proc insertsetstk(val p, val l)
proc reststk()
proc initbuffer()
func cb_labentry(val p) 
func cb_labval(val p)
proc cb_setlabval(val p, val i, val l) 
proc cb_setflag(val p, val f)
func cb_flagset(val p, val f) 
proc cb_setlong(val p)
func cb_longset(val p) 
func u10(val op) 
func forward(val op)
func expand()
func outofrange(val v, val r)
proc flushbuffer()
proc outu10ref(val opc, val longinst, val opd)
proc outconsts()
proc outstrings()
proc outbin(val d)
proc outelfhdr()
proc fopen(val s, val n)
